apply plugin: 'maven'
group = 'org.springframework.samples'
version = '1.5.1'

description = """petclinic"""

task getPetClinic(type: Exec) {
  description 'Checkout or update the Spring Petclinic example from GitHub'

  doFirst {
    if (file("${project.APP_DIR}/.git").exists()) {
      println "${project.APP_DIR}/.git exists. Updating..."
      workingDir "${project.APP_DIR}"
      commandLine 'git', 'pull', 'origin'
    } else {
      commandLine 'git', 'clone', 'https://github.com/spring-projects/spring-petclinic.git', "${project.APP_DIR}"
    }
  }
}

task copyMigrationSources(type: Copy, dependsOn: getPetClinic) {
  description 'Copy the original SQL into a Flyway structure'

  from("${project.APP_DIR}/src/main/resources/db/mysql") {
    include 'schema.sql'
    rename { s -> 'V1__schema.sql'}
  }
  from("${project.APP_DIR}/src/main/resources/db/mysql") {
    include 'data.sql'
    rename { s -> 'V2__data.sql'}
  }
  into 'build/flyway_migrations'
}

task checksumMigrationSources(type: Zip, dependsOn: copyMigrationSources) {
  description 'ZIPs the migration sources and creates a MD5 checksum'

  from 'build/flyway_migrations'
  archiveName "spring-petclinic-1.5.1-migration.zip"
  doLast {
    ant.checksum file: "build/distributions/spring-petclinic-1.5.1-migration.zip"
  }
}

task createPetclinicDb(type: Exec, dependsOn: checksumMigrationSources) {
  description 'Creates the MySQL Petclinic database as a Docker image'

  outputs.upToDateWhen {
    def migrationsChecksum = readMigrationsChecksum()
    'docker images --format "{{.Tag}}" comsysto/petclinic-db'.execute().text.tokenize('\n').any {
      tag -> compareChecksums(tag.replace('"', ""), migrationsChecksum.replace('\n', ""))
    }
  }
  commandLine './build-petclinic-db-docker-compose.sh'
}

private static String readMigrationsChecksum() {
  def f = new File("build/distributions/spring-petclinic-1.5.1-migration.zip.MD5")
  def result = f.exists() ? f.text : ""
  printf "Migrations checksum: ${result}"
  result
}

private boolean compareChecksums(tag, migrationsChecksum) {
  def result = tag == "MD5_${migrationsChecksum}"
  println("Comparing image tag ${tag} to migrations checksum (MD5_)${migrationsChecksum} -> ${result}")
  return result
}

task createPetclinic(type: Exec, dependsOn: [build, createPetclinicDb]) {
  description 'Creates the Petclinic docker image'

  commandLine 'docker-compose', 'rm', '-f'
  commandLine 'docker-compose', 'pull'
  commandLine 'docker-compose', 'build', '--no-cache'
}

task mavenBuild(type: Exec, dependsOn: getPetClinic) {
  description 'Builds and installs the project using Maven'

  workingDir "${project.APP_DIR}"
  commandLine 'mvn', 'install', '-U', '-DskipTests', '-DskipITs'
}

build.dependsOn(mavenBuild)

task test(type: Exec, dependsOn: mavenBuild) {
  description 'Runs Petclinic tests using Maven'

  workingDir "${project.APP_DIR}"
  commandLine 'mvn', 'test'
}

task run(type: Exec, dependsOn: createPetclinic) {
  description 'Runs the Petclinic service'

  commandLine 'docker-compose', 'up'
}

task bundle(type: Exec, dependsOn: createPetclinic) {
  description 'Creates a docker-compose bundle (.dab)'

  commandLine 'docker-compose', 'bundle', '--push-images'
}

repositories {
  maven { url "http://repo.maven.apache.org/maven2" }
}
